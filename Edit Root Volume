#!/bin/bash

#run in recovery csrutil disable
#run in recovery csrutil authenticated-root disable 
#on apple intel sudo bless --folder instead of --mount

mtn_path=~/livemount
snapshot_disk=$(mount | grep sealed | grep 'on / ' | awk '{print $1}')
parent_disk=$(echo $snapshot_disk | sed 's/s[0-9]*$//')

echo $snapshot_disk
echo $parent_disk

unmount_disk(){
    echo "Unmounting disk..."
    sudo umount $mtn_path/ # Unmounts disk
    success=$?
    if [[ "$success" = "0" ]]; then # Remove mouting point if unmount sucessfull 
        echo "Removing dir $mtn_path/..."
        rm -rf $mtn_path/
    else
        printf "\nList of processes on $mtn_path/ :\n"
        lsof $parent_disk
        printf "\n/!\ - An Error Occured: $mtn_path wasn't unmounted nor removed.\n[?] - Do you want to try kill all disk related processes and retry? (y/n) : "
        read var
        if [[ "$var" == "y" ]]; then
            printf "Trying to kill all related processes...\n"
            lsof $parent_disk | awk 'NR>1 {print $2}' | xargs kill -9
            unmount_disk
        fi
    fi
}

mount_disk(){
    mkdir $mtn_path # Create Mounting point
    printf "Attempting to mount $parent_disk to $mtn_path.\n"
    sudo mount -o -nobrowse -t apfs $parent_disk $mtn_path/ # Mounts root volume to mount point
    #give_ownership # Really extremely bad idea...
}

#give_ownership(){
#    printf "[?] - Do you want to open a separate Terminal window to give $USER the ownership of $mtn_path ? (y/n) : "
#    read var
#    if [[ "$var" == "y" ]]; then
#        echo "Giving ownership of $mtn_path to $USER..."
#        osascript -e "tell application \"Terminal\" to do script \"clear; echo Giving ownership of $mtn_path to $USER; sudo chown -R $USER $mtn_path; exit \""
#    fi
#}

clear

printf "#CAUTION /!\: This program is experimental run it at your own risks.\n#Errors in the programm or misuse could entirely detstroy your MacOS instance\n\nDo you wish to proceed ? (y/n)"
read var
if [[ "$var" == "y" ]]; then
    #mount_disk
    open $mtn_path/

    echo "[?] - Update changes ? (y/n) : "
    read var
    if [[ "$var" == "y" ]]; then
        printf "Snapshot $snapshot_disk updated from $mtn_path/.\n"
        #sudo bless --mount $mtn_path/System/Library/CoreServices --bootefi --create-snapshot
        printf "[?] - Reboot to apply changes? (y/n) : "
        read var
        if [[ "$var" == "y" ]]; then
            printf "Rebooting...\n"
            #unmount_disk
            #sudo reboot
        elif [[ "$var" == "n" ]]; then
            printf "Rebooting aborted.\n"
            #unmount_disk
        fi
    elif [[ "$var" == "n" ]]; then
        printf "Not updated.\n"
        #unmount_disk 
    else
        exit
    fi
fi
printf "Task completed, press enter to quit."
read t